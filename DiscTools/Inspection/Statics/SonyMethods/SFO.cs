using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

namespace DiscTools.Inspection.Statics.SonyMethods
{
    public partial class SFO
    {
        // data
        public byte[] Data { get; set; }
        public string DataString { get; set; }

        // header                                               /* Offset   |   Data        |   Length  |   Notes                   */
        public string Magic { get; set; }                       // 0x00     |   00 50 53 46 |   0x04    |   " PSF"
        public string Version { get; set; }                     // 0x04     |   01 01 00 00 |   0x04    |   Version         
        public int KeyTableOffset { get; set; }                 // 0x08     |   xx xx 00 00 |   0x04    |   Key table start offset     
        public int DataTableOffset { get; set; }                // 0x0c     |   xx xx 00 00 |   0x04    |   Data table start offset
        public int IndexEntriesCount { get; set; }              // 0x10     |   xx 00 00 00 |   0x04    |   No. of entries in index table

        // index table
        private List<SFOIndexTable> IndexTable { get; set; }

        // param list
        public List<Params> Parameters { get; set; }
    }

    public class SFOIndexTable
    {
        public int KeyOffset { get; set; }                      // 0x14     |   00 00       |   0x02    |   Key Offset (KeyTableOffset + KeyOffset)
        public int ParamDataType { get; set; }                  // 0x16     |   04 0x       |   0x02    |   Data Type (Little Endian)   :   04 00   -   utf8 special mode (1024)
                                                                //                                                                          04 02   -   utf8 (1026)
                                                                //                                                                          04 04   -   uint32 (1028)
        public int ParamLength { get; set; }                    // 0x18     |   xx xx 00 00 |   0x04    |   Parameter Length
        public int ParamMaxLength { get; set; }                 // 0x1c     |   xx xx 00 00 |   0x04    |   Parameter Maximum Length
        public int DataOffset { get; set; }                     // 0x20     |   00 00 00 00 |   0x04    |   Data Offset (DataTableOffset + DataOffset)
    }

    public class Params
    {
        public string Name { get; set; }
        public int? ValueInt { get; set; }
        public string ValueString{ get; set; }
        public SFOIndexTable IndexTable { get; set; }
        public byte[] RawData { get; set; }
    }

    public partial class SFO
    {
        public void ParseData()
        {
            /* header data */

            // magic string
            Magic = Encoding.ASCII.GetString(ReadBytes(0x00, 0x04)).Replace("\0", " ");

            // version
            var verArr = ReadInts(0x04, 0x02);
            Version = verArr[0].ToString() + "." + verArr[1].ToString();

            // offsets and counts
            KeyTableOffset = ReadIntValue(0x08, 0x04);
            DataTableOffset = ReadIntValue(0x0c, 0x04);
            IndexEntriesCount = ReadIntValue(0x10, 0x04);

            /* parse index table */
            for (int i = 0; i < IndexEntriesCount; i++)
            {
                SFOIndexTable ind = new SFOIndexTable();
                int startOffset = i * 0x10;

                // offsets
                ind.KeyOffset = ReadInt16Value(0x14 + startOffset, 0x02);
                ind.DataOffset = ReadIntValue(0x20 + startOffset, 0x04);
                // lengths
                ind.ParamLength = ReadIntValue(0x18 + startOffset, 0x04);
                ind.ParamMaxLength = ReadIntValue(0x1c + startOffset, 0x04);
                // data type
                ind.ParamDataType = ReadInt16ValueLE(0x16 + startOffset, 0x02);

                IndexTable.Add(ind);
            }

            /* get actual params and values */
            foreach (var i in IndexTable)
            {
                Params p = new Params();
                p.IndexTable = i;

                // param name
                p.Name = (Encoding.ASCII.GetString(ReadBytes(i.KeyOffset + KeyTableOffset, 50))).Split('\0').FirstOrDefault();
                p.RawData = ReadBytes(i.DataOffset + DataTableOffset, i.ParamLength);
                switch (i.ParamDataType)
                {
                    case 1024:      // Used in contents generated by the system (e.g.: save data)
                    case 1026:      // Character string, NULL finished (0x00)
                        p.ValueString = Encoding.UTF8.GetString(ReadBytes(i.DataOffset + DataTableOffset, i.ParamLength)).TrimEnd('\0');
                        break;
                    case 1028:      // 32 bits unsigned
                        switch (p.Name)
                        {
                            case "REGION":      // looks like this is a bitmask
                                p.ValueString = ReadHexString(i.DataOffset + DataTableOffset, i.ParamMaxLength);
                                p.ValueInt = ReadIntValueLE(i.DataOffset + DataTableOffset, i.ParamMaxLength);
                                //p.ValueString = ReturnRegion(p.ValueInt.Value);
                                break;
                            default:
                                p.ValueInt = ReadIntValue(i.DataOffset + DataTableOffset, i.ParamLength);
                                break;
                        }                        
                        break;
                }

                Parameters.Add(p);
            }
        }

        public static string ReturnRegion(int regionCode)
        {
            string region = "";

            switch (regionCode)
            {
                case 0x8000:
                    region = "PAL";
                    break;
            }

            return region;
        }

        public string ReadHexString(int offset, int length)
        {
            var bytes = Data.Skip(offset).Take(length).ToArray();
            string hex = "";
            foreach (byte b in bytes)
            {
                hex += b.ToString("X2");
            }
            return hex;
        }

        public string ReadHexStringLE(int offset, int length)
        {
            var bytes = Data.Skip(offset).Take(length).ToArray();
            Array.Reverse(bytes);
            string hex = "";
            foreach (byte b in bytes)
            {
                hex += b.ToString("X2");
            }
            return hex;
        }

        public byte[] ReadBytes(int offset, int length)
        {
            var bytes = Data.Skip(offset).Take(length).ToArray();
            return bytes;
        }

        public int[] ReadInts(int offset, int length)
        {
            var bytes = Data.Skip(offset).Take(length).ToArray();
            List<int> list = new List<int>();
            foreach (byte b in bytes)
            {
                list.Add(Convert.ToInt32(b));
            }

            return list.ToArray();
        }

        public int ReadIntValueLE(int offset, int length)
        {
            var bytes = Data.Skip(offset).Take(length).ToArray();
            Array.Reverse(bytes);
            int result = BitConverter.ToInt32(bytes, 0);
            return result;
        }

        public int ReadIntValue(int offset, int length)
        {
            var bytes = Data.Skip(offset).Take(length).ToArray();
            //Array.Reverse(bytes);
            int result = BitConverter.ToInt32(bytes, 0);
            return result;
        }

        public int ReadInt16ValueLE(int offset, int length)
        {
            var bytes = Data.Skip(offset).Take(length).ToArray();
            Array.Reverse(bytes);
            int result = BitConverter.ToInt16(bytes, 0);
            return result;
        }

        public int ReadInt16Value(int offset, int length)
        {
            var bytes = Data.Skip(offset).Take(length).ToArray();
            //Array.Reverse(bytes);
            int result = BitConverter.ToInt16(bytes, 0);
            return result;
        }

        public SFO(byte[] data)
        {
            IndexTable = new List<SFOIndexTable>();
            Parameters = new List<Params>();
            DataString = Encoding.Default.GetString(data);
            Data = data;

            ParseData();
        }

        public SFO(string data)
        {
            IndexTable = new List<SFOIndexTable>();
            Parameters = new List<Params>();
            DataString = data;
            Data = Encoding.ASCII.GetBytes(data);

            ParseData();
        }

        
    }
}
